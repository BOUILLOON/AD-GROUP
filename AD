 ```Powershell
$GroupeList = Get-ADGroup -SearchBase 'OU=Groupes de sécurité,OU=FAEC,OU=SITES,DC=faec,DC=loc' -Filter *

foreach ($Groupe in $GroupeList) {
    Get-ADGroupMember -Identity $Groupe.DistinguishedName | Where-Object { $_.ObjectClass -eq "group" }
}
```

```Powershell
$SousGroupes = @()

$GroupeList = Get-ADGroup -SearchBase 'OU=Groupes de sécurité,OU=FAEC,OU=SITES,DC=faec,DC=loc' -Filter *

foreach ($Groupe in $GroupeList) {
    $Membres = Get-ADGroupMember -Identity $Groupe.DistinguishedName | Where-Object { $_.ObjectClass -eq "group" }
    foreach ($Membre in $Membres) {
        $SousGroupes += [PSCustomObject]@{
            ParentGroup = $Groupe.Name
            SubGroup    = $Membre.Name
            SubGroupDN  = $Membre.DistinguishedName
        }
    }
}

# Export en CSV si nécessaire
$SousGroupes | Export-Csv -Path "C:\Rapports\SousGroupes.csv" -NoTypeInformation -Force
Write-Output "Liste des sous-groupes exportée avec succès."
```
```Powershell
# Liste des groupes inutilisés (sans membres) dans une OU spécifique
Get-ADGroup -SearchBase "OU=Groupes de sécurité,OU=FAEC,OU=SITES,DC=faec,DC=loc" -Filter * |
Where-Object { (Get-ADGroupMember -Identity $_.SamAccountName -ErrorAction SilentlyContinue).Count -eq 0 } |
Select-Object Name
```
```Powershell
# Définir l'OU source et le chemin d'export
$OULocation = "OU=Groupes de sécurité,OU=FAEC,OU=SITES,DC=faec,DC=loc"
$ExportPath = "C:\Rapports\Export_OU_Full.csv"

# Récupération de tous les groupes de l'OU spécifiée
$GroupeList = Get-ADGroup -SearchBase $OULocation -Filter *

# Tableaux pour stocker les données exportées
$ExportData = @()

# Parcourir chaque groupe et récupérer ses informations
foreach ($Groupe in $GroupeList) {
    # Récupérer les membres qui sont des sous-groupes
    $SousGroupes = Get-ADGroupMember -Identity $Groupe.DistinguishedName | Where-Object { $_.ObjectClass -eq "group" }

    # Récupérer les groupes auxquels ce groupe appartient (MemberOf)
    $GroupesParents = Get-ADGroup -Identity $Groupe.DistinguishedName -Properties MemberOf | Select-Object -ExpandProperty MemberOf

    # Ajouter chaque relation de sous-groupe
    foreach ($SousGroupe in $SousGroupes) {
        $ExportData += [PSCustomObject]@{
            Group          = $Groupe.Name
            Member         = $SousGroupe.Name
            MemberDN       = $SousGroupe.DistinguishedName
            Relation       = "Member"
        }
    }

    # Ajouter chaque relation de groupe parent
    foreach ($Parent in $GroupesParents) {
        $ExportData += [PSCustomObject]@{
            Group          = $Groupe.Name
            Member         = $null
            MemberDN       = $Parent
            Relation       = "MemberOf"
        }
    }

    # Ajouter les propriétés principales du groupe lui-même
    $ExportData += [PSCustomObject]@{
        Group          = $Groupe.Name
        Member         = "N/A"
        MemberDN       = $Groupe.DistinguishedName
        Relation       = "Group Properties"
    }
}

# Exporter les données consolidées dans un fichier CSV
$ExportData | Export-Csv -Path $ExportPath -NoTypeInformation -Force
Write-Output "Export complet de l'OU '$OULocation' terminé avec succès. Fichier : $ExportPath"
```

```Powershell
# Définir l'OU cible pour l'importation
$TargetOU = "OU=Groupes de sécurité,OU=NouvelleFAEC,OU=SITES,DC=faec,DC=loc"
$ImportPath = "C:\Rapports\Export_OU_Full.csv"

# Charger les données depuis le fichier CSV
$ImportData = Import-Csv -Path $ImportPath

# Créer les groupes dans la nouvelle OU
$GroupList = $ImportData | Where-Object { $_.Relation -eq "Group Properties" }

foreach ($Group in $GroupList) {
    New-ADGroup -Name $Group.Group -SamAccountName $Group.Group -GroupCategory Security -GroupScope Global -Path $TargetOU
}

# Associer les membres et les relations
foreach ($Entry in $ImportData) {
    if ($Entry.Relation -eq "Member") {
        # Ajouter des sous-groupes
        Add-ADGroupMember -Identity $Entry.Group -Members $Entry.MemberDN
    } elseif ($Entry.Relation -eq "MemberOf") {
        # Ajouter des relations parent
        Add-ADGroupMember -Identity $Entry.MemberDN -Members $Entry.Group
    }
}

Write-Output "Import complet dans l'OU '$TargetOU' terminé avec succès."
```

```Powershell
# Fonction pour afficher les groupes AD et leurs membres en arborescence
function Show-ADGroupTreeView {
    param (
        [Parameter(Mandatory = $true)]
        [string]$SearchBase,  # Base de recherche dans l'OU
        [int]$Indent = 0,     # Gestion de l'indentation
        [hashtable]$VisitedGroups = @{}  # Garde la trace des groupes visités
    )

    # Récupérer les groupes dans l'OU
    $Groups = Get-ADGroup -SearchBase $SearchBase -Filter *

    foreach ($Group in $Groups) {
        $prefix = " " * $Indent + "|__"

        # Vérifier si le groupe a déjà été visité
        if ($VisitedGroups.ContainsKey($Group.Name)) {
            Write-Host "$prefix Loop found on $($Group.Name), Skipping..." -ForegroundColor Red
            continue
        }

        # Marquer le groupe comme visité
        $VisitedGroups[$Group.Name] = $true

        # Afficher le groupe actuel
        Write-Host "$prefix $($Group.Name)" -ForegroundColor Cyan

        # Récupérer les membres du groupe
        $Members = Get-ADGroupMember -Identity $Group.SamAccountName -ErrorAction SilentlyContinue

        foreach ($Member in $Members) {
            if ($Member.ObjectClass -eq "group") {
                # Appel récursif pour les groupes imbriqués
                Show-ADGroupTreeView -SearchBase "CN=$($Member.SamAccountName),CN=Users,DC=domain,DC=com" -Indent ($Indent + 4) -VisitedGroups $VisitedGroups
            } else {
                # Afficher les membres non-groupes
                Write-Host (" " * ($Indent + 4) + "|__" + $Member.Name) -ForegroundColor White
            }
        }
    }
}

# Exemple d'utilisation : Base de recherche dans l'OU cible
Show-ADGroupTreeView -SearchBase "OU=Groupes de sécurité,OU=FAEC,OU=SITES,DC=faec,DC=loc"
```


-- 
	

Nantenaina RANDRIANASOLO
BUT2 - Cybersécurité
Alternant

iut nord franche-comté

Université Franche-comté

FAEC : nrandrianasolo@fondation-arcenciel.fr
PRO : r.nantenaina@outlook.fr
07 66 81 07 96


4 place Tharradin | 25200 Montbéliard
www.iut-nfc.univ-fcomte.fr
 
