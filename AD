# Script 1: Exportation d'une OU Active Directory
# Ce script exporte une OU et toute sa hiérarchie, ses objets et les appartenances aux groupes dans un fichier JSON.

# Configuration initiale
param (
    [string]$OU, # Chemin LDAP de l'OU 
    [string]$OutputFile # Fichier JSON pour stocker les données exportées
)

# Vérifier que le module Active Directory est chargé
if (-not (Get-Module -Name ActiveDirectory)) {
    Import-Module ActiveDirectory -ErrorAction Stop
}

# Vérifier que l'OU existe
if (-not (Get-ADOrganizationalUnit -Filter { DistinguishedName -eq $OU } -ErrorAction SilentlyContinue)) {
    Write-Error "L'OU $OU n'existe pas."
    exit
}

# Fonction pour exporter les OUs et leur hiérarchie
function Export-OUs {
    param (
        [string]$OU
    )

    $ouList = @()

    $currentOU = Get-ADOrganizationalUnit -Filter { DistinguishedName -eq $OU } -Properties *
    $ouList += [PSCustomObject]@{
        Name         = $currentOU.Name
        DistinguishedName = $currentOU.DistinguishedName
        Properties   = $currentOU | Select-Object -ExcludeProperty DistinguishedName
    }

    $childOUs = Get-ADOrganizationalUnit -Filter { ParentContainer -eq $OU }
    foreach ($child in $childOUs) {
        $ouList += Export-OUs -OU $child.DistinguishedName
    }

    return $ouList
}

# Fonction pour exporter les objets dans une OU
function Export-Objects {
    param (
        [string]$OU
    )

    $objects = @()

    $entries = Get-ADObject -Filter { ObjectClass -in ('user', 'group', 'computer') -and DistinguishedName -like "*$OU" } -Properties *
    foreach ($entry in $entries) {
        $objects += [PSCustomObject]@{
            Name             = $entry.Name
            DistinguishedName = $entry.DistinguishedName
            ObjectClass      = $entry.ObjectClass
            Properties       = $entry | Select-Object -ExcludeProperty DistinguishedName, ObjectClass
        }
    }

    return $objects
}

# Fonction pour exporter les appartenances aux groupes
function Export-GroupMemberships {
    param (
        [array]$Groups
    )

    $memberships = @()

    foreach ($group in $Groups) {
        $groupMembers = Get-ADGroupMember -Identity $group.DistinguishedName -ErrorAction SilentlyContinue
        if ($groupMembers) {
            $memberships += [PSCustomObject]@{
                Group   = $group.DistinguishedName
                Members = $groupMembers.DistinguishedName
            }
        }
    }

    return $memberships
}

Write-Host "Exportation de l'OU $OU en cours..." -ForegroundColor Green

try {
    # Exporter les OUs
    $exportedOUs = Export-OUs -OU $OU

    # Exporter les objets
    $exportedObjects = Export-Objects -OU $OU

    # Exporter les appartenances aux groupes
    $exportedGroups = $exportedObjects | Where-Object { $_.ObjectClass -eq 'group' }
    $groupMemberships = Export-GroupMemberships -Groups $exportedGroups

    # Compilation des données exportées
    $exportData = [PSCustomObject]@{
        OUs             = $exportedOUs
        Objects         = $exportedObjects
        GroupMemberships = $groupMemberships
    }

    # Sauvegarde des données dans le fichier JSON
    $exportData | ConvertTo-Json -Depth 10 | Set-Content -Path $OutputFile -Encoding UTF8

    Write-Host "Exportation terminée. Données sauvegardées dans $OutputFile" -ForegroundColor Green
} catch {
    Write-Error "Erreur lors de l'exportation : $_"
}
    



###########################################################################################



# Script 2: Importation d'une OU Active Directory
# Ce script recrée une OU exportée avec sa hiérarchie et ses objets dans un nouvel environnement Active Directory.

# Configuration initiale
param (
    [string]$InputFile, # Fichier JSON contenant les données exportées
    [string]$TargetOU, # Chemin LDAP de l'OU cible où les données seront importées
    [switch]$DryRun # Si activé, ne crée pas d'objets mais simule les actions
)

# Vérifier que le module Active Directory est chargé
if (-not (Get-Module -Name ActiveDirectory)) {
    Import-Module ActiveDirectory -ErrorAction Stop
}

# Charger les données exportées
if (-not (Test-Path $InputFile)) {
    Write-Error "Le fichier $InputFile n'existe pas."
    exit
}

$data = Get-Content -Path $InputFile | ConvertFrom-Json

# Détection automatique du domaine et du contrôleur de domaine
$DomainContext = Get-ADDomain -ErrorAction Stop
$DefaultNC = (Get-ADRootDSE).defaultNamingContext

# Validation ou création de l'OU cible
function Ensure-TargetOU {
    param (
        [string]$TargetOU
    )

    if (-not (Get-ADOrganizationalUnit -Filter { DistinguishedName -eq $TargetOU } -ErrorAction SilentlyContinue)) {
        if (-not $DryRun) {
            try {
                $ouParts = $TargetOU -split ","
                $currentPath = ""
                foreach ($part in $ouParts) {
                    $currentPath = if ($currentPath -eq "") { $part } else { "$part,$currentPath" }
                    if (-not (Get-ADOrganizationalUnit -Filter { DistinguishedName -eq $currentPath } -ErrorAction SilentlyContinue)) {
                        New-ADOrganizationalUnit -Name ($currentPath -replace "OU=", "") -Path ($currentPath -replace "OU=.*?,") -ErrorAction Stop
                        Write-Host "OU créée : $currentPath" -ForegroundColor Green
                    }
                }
            } catch {
                Write-Error "Impossible de créer l'OU cible : $TargetOU ($_)."
            }
        } else {
            Write-Host "[Simulation] Vérification ou création de l'OU cible : $TargetOU"
        }
    } else {
        Write-Host "OU cible existante : $TargetOU" -ForegroundColor Green
    }
}

# Fonction pour recréer les OUs
function Import-OUs {
    param (
        [array]$OUs, 
        [string]$TargetOU
    )

    foreach ($ou in $OUs) {
        $newOU = "OU=$($ou.Name),$TargetOU"
        if (-not $DryRun) {
            try {
                New-ADOrganizationalUnit -Name $ou.Name -Path $TargetOU -ErrorAction Stop
                Write-Host "OU créée : $newOU" -ForegroundColor Green
            } catch {
                Write-Warning "Impossible de créer l'OU : $newOU ($_)."
            }
        } else {
            Write-Host "[Simulation] OU à créer : $newOU"
        }
    }
}

# Fonction pour recréer les objets (utilisateurs, groupes, ordinateurs)
function Import-Objects {
    param (
        [array]$Objects
    )

    foreach ($obj in $Objects) {
        if ($DryRun) {
            Write-Host "[Simulation] Création de l'objet : $($obj.DistinguishedName)"
            continue
        }

        try {
            switch ($obj.ObjectClass) {
                "user" {
                    New-ADUser -Name $obj.Name -Path $TargetOU -OtherAttributes $obj.Properties -ErrorAction Stop
                    Write-Host "Utilisateur créé : $($obj.DistinguishedName)" -ForegroundColor Green
                }
                "group" {
                    # Créer uniquement les groupes dans cette passe
                    New-ADGroup -Name $obj.Name -GroupScope Global -Path $TargetOU -ErrorAction Stop
                    Write-Host "Groupe créé : $($obj.DistinguishedName)" -ForegroundColor Green
                }
                "computer" {
                    New-ADComputer -Name $obj.Name -Path $TargetOU -ErrorAction Stop
                    Write-Host "Ordinateur créé : $($obj.DistinguishedName)" -ForegroundColor Green
                }
                default {
                    Write-Warning "Type d'objet non pris en charge : $($obj.ObjectClass)"
                }
            }
        } catch {
            Write-Warning "Erreur lors de la création de l'objet : $($obj.DistinguishedName) ($_)."
        }
    }
}

# Fonction pour restaurer les appartenances aux groupes (deuxième passe)
function Import-GroupMemberships {
    param (
        [array]$GroupMemberships
    )

    foreach ($membership in $GroupMemberships) {
        if ($DryRun) {
            Write-Host "[Simulation] Ajout des membres au groupe : $($membership.Group)"
            continue
        }

        foreach ($member in $membership.Members) {
            try {
                Add-ADGroupMember -Identity $membership.Group -Members $member -ErrorAction Stop
                Write-Host "Membre ajouté : $member au groupe $($membership.Group)" -ForegroundColor Green
            } catch {
                Write-Warning "Erreur lors de l'ajout du membre $member au groupe $($membership.Group) ($_)."
            }
        }
    }
}

Write-Host "Importation en cours..." -ForegroundColor Green

try {
    # Validation ou création de l'OU cible
    Ensure-TargetOU -TargetOU $TargetOU

    # Première passe : création des OUs
    Import-OUs -OUs $data.OUs -TargetOU $TargetOU

    # Deuxième passe : création des objets
    Import-Objects -Objects $data.Objects

    # Troisième passe : restauration des appartenances aux groupes
    Import-GroupMemberships -GroupMemberships $data.GroupMemberships

    Write-Host "Importation terminée." -ForegroundColor Green
} catch {
    Write-Error "Erreur lors de l'importation : $_"
}
